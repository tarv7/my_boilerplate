class <%= class_name %>::Filter
  attr_reader :params

  def initialize(params)
    @params = params
  end

  def call(scope = <%= class_name %>.all)
<%- (attributes + [ Rails::Generators::GeneratedAttribute.new("created_at", "datetime") ]).each do |attribute| -%>
    scope = filter_by_<%= attribute.name %>(scope)
<%- end -%>

    scope
  end

  private
<%- (attributes + [ Rails::Generators::GeneratedAttribute.new("created_at", "datetime") ]).each do |attribute| -%>

  def filter_by_<%= attribute.name %>(scope)
  <%- case attribute.type.to_sym -%>
  <%- when :boolean -%>
    return scope if params[:<%= attribute.name %>].blank?

    scope.where(<%= attribute.name %>: params[:<%= attribute.name %>] == "true")
  <%- when :string, :text -%>
    return scope if params[:<%= attribute.name %>].blank?

    scope.where("<%= attribute.name %> ILIKE ?", "%#{params[:<%= attribute.name %>]}%")
  <%- when :integer, :decimal, :float -%>
    return scope if params[:<%= attribute.name %>_min].blank? && params[:<%= attribute.name %>_max].blank?

    scope.where(<%= attribute.name %>: params[:<%= attribute.name %>_min].presence..params[:<%= attribute.name %>_max].presence)
  <%- when :date, :datetime, :timestamp -%>
    return scope if params[:<%= attribute.name %>_from].blank? && params[:<%= attribute.name %>_to].blank?

    from_date = params[:<%= attribute.name %>_from].presence
    to_date = params[:<%= attribute.name %>_to].presence&.to_datetime&.end_of_day

    scope.where(<%= attribute.name %>: from_date..to_date)
  <%- else -%>
    return scope if params[:<%= attribute.name %>].blank?

    scope.where("<%= attribute.name %> ILIKE ?", "%#{params[:<%= attribute.name %>]}%")
  <%- end -%>
  end
<%- end -%>
end
